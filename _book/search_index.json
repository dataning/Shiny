[
["index.html", "Shiny learning 1 What is Shiny and Shiny app?", " Shiny learning Ning Lu 2019-12-01 1 What is Shiny and Shiny app? Shiny is an R package that makes it easy to build interactive web applications (apps) straight from R. This lesson will get you started building Shiny apps right away. "],
["structure.html", "2 Structure", " 2 Structure Shiny apps are contained in a single script called app.R. The structure can be broken into four parts: Shiny package. Load the shiny package in the script first. User interface object. The user interface (ui) object controls the layout and appearance of your app. Server function. The server function contains the instructions that your computer needs to build your app shinyApp function. The shinyApp function creates Shiny app objects from an explicit UI/server pair. The script app.R can be run like a typical R script or run like a app through a folder runApp(&quot;newdir&quot;). This is the way to run R shiny like a typical R object such as plots. # First part, load the package library(shiny) # Second part, define UI for the Shiny app ui &lt;- fluidPage( # App title ---- titlePanel(&quot;Hello Shiny Learner!&quot;), # Sidebar layout with input and output definitions ---- sidebarLayout( # Sidebar panel for inputs ---- sidebarPanel( # Input: Slider for the number of bins ---- sliderInput(inputId = &quot;bins&quot;, label = &quot;Number of bins:&quot;, min = 5, max = 50, value = 30) ), # Main panel for displaying outputs ---- mainPanel( # Output: Histogram ---- plotOutput(outputId = &quot;distPlot&quot;) ) ) ) # Third part, define server logic required to draw a histogram server &lt;- function(input, output) { # Histogram of the Old Faithful Geyser Data ---- # with requested number of bins # This expression that generates a histogram is wrapped in a call # to renderPlot to indicate that: # # 1. It is &quot;reactive&quot; and therefore should be automatically # re-executed when inputs (input$bins) change # 2. Its output type is a plot output$distPlot &lt;- renderPlot({ x &lt;- faithful$waiting bins &lt;- seq(min(x), max(x), length.out = input$bins + 1) hist(x, breaks = bins, col = &quot;#75AADB&quot;, border = &quot;blue&quot;, xlab = &quot;Waiting time to next eruption (in mins)&quot;, main = &quot;Histogram of waiting times&quot;) }) } # Fourth part, tie up ui and server shinyApp(ui = ui, server = server) Note: use the keyboard shortcut to run app.R: Command+Shift+Enter (Mac) (Control+Shift+Enter on Windows). The alternative way is to run the R shiny script remotely like a app. This can be achieved by creating a folder called my_app in your current working directory. Then save the R shiny script above into a R script file called app.R in the my_app folder. Then you can open a new R blank script and the R Shiny app should pop up when you run runApp(&quot;my_app&quot;) in the console. runApp is similar to read.csv, read.table, and many other functions in R. The first argument of runApp is the filepath from your working directory to the app’s directory. The code above assumes that the app directory is in your working directory. In this case, the filepath is just the name of the directory. "],
["interface.html", "3 Interface 3.1 Layout", " 3 Interface This code is the bare minimum needed to create a Shiny app. library(shiny) # Define UI ---- ui &lt;- fluidPage( ) # Define server logic ---- server &lt;- function(input, output) { } # Run the app ---- shinyApp(ui = ui, server = server) ## ## Listening on http://127.0.0.1:6127 3.1 Layout Shiny uses the function fluidPage to create a display that automatically adjusts to the dimensions of your user’s browser window. You lay out the user interface of your app by placing elements in the fluidPage function. For example, the ui function below creates a user interface that has a title panel and a sidebar layout, which includes a sidebar panel and a main panel. Note that these elements are placed within the fluidPage function while other Shiny parts remain constant (i.e. server side and linking up). library(shiny) ui &lt;- fluidPage( titlePanel(&quot;title panel&quot;), sidebarLayout( sidebarPanel(&quot;sidebar panel&quot;), mainPanel(&quot;main panel&quot;) ) ) # Server side server &lt;- function(input, output) { } # Run the app ---- shinyApp(ui = ui, server = server) ## ## Listening on http://127.0.0.1:4655 titlePanel and sidebarLayout are the two most popular elements to add to fluidPage. They create a basic Shiny app with a sidebar. The sidebar panel will appear on the left side of your app by default. You can move it to the right side by giving sidebarLayout the optional argument position = &quot;right&quot;. sidebarLayout always takes two arguments: - sidebarPanel function output - mainPanel function output # Package library(shiny) # Layout ui &lt;- fluidPage( titlePanel(&quot;Bradford Data Education&quot;), sidebarLayout(position = &quot;right&quot;, # default is on the left sidebarPanel( sliderInput( &quot;obs&quot;, &quot;Number of observations:&quot;, min = 1, max = 1000, value = 600) ), mainPanel(plotOutput(&quot;distPlot&quot;) ) ) ) # Server server &lt;- function(input, output) { } # Tie shinyApp(ui = ui, server = server) ## ## Listening on http://127.0.0.1:6716 # Package library(shiny) # Layout ui &lt;- fluidPage( titlePanel(&quot;My Star Wars App&quot;), sidebarLayout( sidebarPanel(), mainPanel( h6(&quot;Episode IV&quot;, align = &quot;center&quot;), h6(&quot;A NEW HOPE&quot;, align = &quot;center&quot;), h5(&quot;It is a period of civil war.&quot;, align = &quot;center&quot;), h4(&quot;Rebel spaceships, striking&quot;, align = &quot;center&quot;), h3(&quot;from a hidden base, have won&quot;, align = &quot;center&quot;), h2(&quot;their first victory against the&quot;, align = &quot;center&quot;), h1(&quot;evil Galactic Empire.&quot;) ) ) ) # Server server &lt;- function(input, output) { } # Tie shinyApp(ui = ui, server = server) ## ## Listening on http://127.0.0.1:7947 # Package library(shiny) # ui ui &lt;- fluidPage( titlePanel(&quot;My Shiny App&quot;), sidebarLayout( sidebarPanel(), mainPanel( p(&quot;p creates a paragraph of text.&quot;), p(&quot;A new p() command starts a new paragraph. Supply a style attribute to change the format of the entire paragraph.&quot;, style = &quot;font-family: &#39;times&#39;; font-si16pt&quot;), strong(&quot;strong() makes bold text.&quot;), em(&quot;em() creates italicized (i.e, emphasized) text.&quot;), br(), code(&quot;code displays your text similar to computer code&quot;), div(&quot;div creates segments of text with a similar style. This division of text is all blue because I passed the argument &#39;style = color:blue&#39; to div&quot;, style = &quot;color:blue&quot;), br(), p(&quot;span does the same thing as div, but it works with&quot;, span(&quot;groups of words&quot;, style = &quot;color:blue&quot;), &quot;that appear inside a paragraph.&quot;) ) ) ) # Server server &lt;- function(input, output) { } # Tie shinyApp(ui = ui, server = server) ## ## Listening on http://127.0.0.1:6122 You can use Shiny’s layout, HTML, and img functions to create very attractive and useful user interfaces. See how well you understand these functions by recreating the Shiny app pictured below. Use the examples in this tutorial to work on it and then test it out. library(shiny) # Define UI ---- ui &lt;- fluidPage( titlePanel(&quot;My Shiny App&quot;), sidebarLayout( sidebarPanel( h2(&quot;Installation&quot;), p(&quot;Shiny is available on CRAN, so you can install it in the usual way from your R console:&quot;), code(&#39;install.packages(&quot;shiny&quot;)&#39;), br(), br(), br(), br(), img(src = &quot;rstudio.png&quot;, height = 70, width = 200), br(), &quot;Shiny is a product of &quot;, span(&quot;RStudio&quot;, style = &quot;color:blue&quot;) ), mainPanel( h1(&quot;Introducing Shiny&quot;), p(&quot;Shiny is a new package from RStudio that makes it &quot;, em(&quot;incredibly easy &quot;), &quot;to build interactive web applications with R.&quot;), br(), p(&quot;For an introduction and live examples, visit the &quot;, a(&quot;Shiny homepage.&quot;, href = &quot;http://shiny.rstudio.com&quot;)), br(), h2(&quot;Features&quot;), p(&quot;- Build useful web applications with only a few lines of code—no JavaScript required.&quot;), p(&quot;- Shiny applications are automatically &#39;live&#39; in the same way that &quot;, strong(&quot;spreadsheets&quot;), &quot; are live. Outputs change instantly as users modify inputs, without requiring a reload of the browser.&quot;) ) ) ) # Define server logic ---- server &lt;- function(input, output) { } # Run the app ---- shinyApp(ui = ui, server = server) ## ## Listening on http://127.0.0.1:3007 shiny function HTML5 equivalent creates p A paragraph of text h1 A first level header h2 A second level header h3 A third level header h4 A fourth level header h5 A fifth level header h6 A sixth level header a A hyper link br A line break (e.g. a blank line) div A division of text with a uniform style span An in-line division of text with a uniform style pre Text ‘as is’ in a fixed width font code A formatted block of code img An image strong Bold text em Italicized text HTML Directly passes a character string as HTML code https://shiny.rstudio.com/tutorial/written-tutorial/lesson2/ "],
["literature.html", "4 Literature", " 4 Literature ###App big "],
["application-layout-guide.html", "5 Application layout guide 5.1 Standard one", " 5 Application layout guide Shiny includes a number of facilities for laying out the components of an application. This guide describes the following application layout features: The simple default layout with a sidebar for inputs and a large main area for output. Custom application layouts using the Shiny grid layout system. Segmenting layouts using the tabsetPanel() and navlistPanel() functions. Creating applications with multiple top-level components using the navbarPage() function. These features were implemented using the layout features available in Bootstrap 2, an extremely popular HTML/CSS framework (though no prior experience with Bootstrap is assumed). This means that Bootstrap2 is a potentially good look-into language. Reference: (https://shiny.rstudio.com/articles/layout-guide.html) 5.1 Standard one This is the library(shiny) # Second part, define UI for the Shiny app ui &lt;- fluidPage( # App title ---- titlePanel(&quot;Hello Shiny Learner!&quot;), # Sidebar layout with input and output definitions ---- sidebarLayout(position = &quot;right&quot;, # Sidebar panel for inputs ---- sidebarPanel( # Input: Slider for the number of bins ---- sliderInput(inputId = &quot;bins&quot;, label = &quot;Number of bins:&quot;, min = 5, max = 50, value = 30) ), # Main panel for displaying outputs ---- mainPanel( # Output: Histogram ---- plotOutput(outputId = &quot;distPlot&quot;) ) ) ) # Third part, define server logic required to draw a histogram server &lt;- function(input, output) { # Histogram of the Old Faithful Geyser Data ---- # with requested number of bins # This expression that generates a histogram is wrapped in a call # to renderPlot to indicate that: # # 1. It is &quot;reactive&quot; and therefore should be automatically # re-executed when inputs (input$bins) change # 2. Its output type is a plot output$distPlot &lt;- renderPlot({ x &lt;- faithful$waiting bins &lt;- seq(min(x), max(x), length.out = input$bins + 1) hist(x, breaks = bins, col = &quot;#75AADB&quot;, border = &quot;orange&quot;, xlab = &quot;Waiting time to next eruption (in mins)&quot;, main = &quot;Histogram of waiting times&quot;) }) } # Fourth part, tie up ui and server shinyApp(ui = ui, server = server) ## ## Listening on http://127.0.0.1:7648 "],
["grid-layout.html", "6 Grid Layout", " 6 Grid Layout The familiar sidebarLayout() described above makes use of Shiny’s lower-level grid layout functions. Rows are created by the fluidRow() function and include columns defined by the column() function. Column widths are based on the Bootstrap 12-wide grid system, so should add up to 12 within a fluidRow() container. "],
["widget.html", "7 Widget 7.1 Pre-built widgets 7.2 Adding widgets", " 7 Widget This lesson will show you how to add control widgets to your Shiny apps. What’s a widget? A web element that your users can interact with. Widgets provide a way for your users to send messages to the Shiny app. 7.1 Pre-built widgets Shiny comes with a family of pre-built widgets, each created with a transparently named R function. For example, Shiny provides a function named actionButton that creates an Action Button and a function named sliderInput that creates a slider bar. The standard Shiny widgets are: function widget actionButton Action Button checkboxGroupInput A group of check boxes checkboxInput A single check box dateInput A calendar to aid date selection dateRangeInput A pair of calendars for selecting a date range fileInput A file upload control wizard helpText Help text that can be added to an input form numericInput A field to enter numbers radioButtons A set of radio buttons selectInput A box with choices to select from sliderInput A slider bar submitButton A submit button textInput A field to enter text Some of these widgets are built using the Twitter Bootstrap project, a popular open source framework for building user interfaces. 7.2 Adding widgets To add a widget to shiny app, place a widget function in sidebarPanel or mainPanel in your ui object. Each widget function requires several arguments. The first two arguments for each widget are a name for the widget: The user will not see this name, but you can use it to access the widget’s value. The name should be a character string. a label: This label will appear with the widget in your app. It should be a character string, but it can be an empty string &quot;&quot;. library(shiny) # Define UI ---- ui &lt;- fluidPage( titlePanel(&quot;Basic widgets&quot;), fluidRow( column(3, h3(&quot;Buttons&quot;), actionButton(&quot;action&quot;, &quot;Action&quot;), br(), br(), submitButton(&quot;Submit&quot;)), column(3, h3(&quot;Single checkbox&quot;), checkboxInput(&quot;checkbox&quot;, &quot;Choice A&quot;, value = TRUE)), column(3, checkboxGroupInput(&quot;checkGroup&quot;, h3(&quot;Checkbox group&quot;), choices = list(&quot;Choice 1&quot; = 1, &quot;Choice 2&quot; = 2, &quot;Choice 3&quot; = 3), selected = 1)), column(3, dateInput(&quot;date&quot;, h3(&quot;Date input&quot;), value = &quot;2014-01-01&quot;)) ), fluidRow( column(3, dateRangeInput(&quot;dates&quot;, h3(&quot;Date range&quot;))), column(3, fileInput(&quot;file&quot;, h3(&quot;File input&quot;))), column(3, h3(&quot;Help text&quot;), helpText(&quot;Note: help text isn&#39;t a true widget,&quot;, &quot;but it provides an easy way to add text to&quot;, &quot;accompany other widgets.&quot;)), column(3, numericInput(&quot;num&quot;, h3(&quot;Numeric input&quot;), value = 1)) ), fluidRow( column(3, radioButtons(&quot;radio&quot;, h3(&quot;Radio buttons&quot;), choices = list(&quot;Choice 1&quot; = 1, &quot;Choice 2&quot; = 2, &quot;Choice 3&quot; = 3),selected = 1)), column(3, selectInput(&quot;select&quot;, h3(&quot;Select box&quot;), choices = list(&quot;Choice 1&quot; = 1, &quot;Choice 2&quot; = 2, &quot;Choice 3&quot; = 3), selected = 1)), column(3, sliderInput(&quot;slider1&quot;, h3(&quot;Sliders&quot;), min = 0, max = 100, value = 50), sliderInput(&quot;slider2&quot;, &quot;&quot;, min = 0, max = 100, value = c(25, 75)) ), column(3, textInput(&quot;text&quot;, h3(&quot;Text input&quot;), value = &quot;Enter text...&quot;)) ) ) # Define server logic ---- server &lt;- function(input, output) { } # Run the app ---- shinyApp(ui = ui, server = server) ## ## Listening on http://127.0.0.1:4713 There’re a number of things you can learn from this code. First, fluidRow(). You can explore a bit more this Application layout guide. "],
["references.html", "References", " References "]
]
